
package groove.gui.dialog;


import groove.explore.Exploration;
import groove.grammar.QualName;

import groove.grammar.model.GrammarModel;
import groove.grammar.model.ResourceKind;


import groove.gui.Icons;
import groove.gui.Simulator;
import groove.gui.layout.SpringUtilities;


import java.awt.Color;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.KeyEvent;

import java.util.Iterator;
import java.util.Set;


import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.KeyStroke;
import javax.swing.SpringLayout;




/**
 *  @author Einollah Pira & Vahid Rafe
 *  
 */


public class HeuStyleInDialog extends JDialog  {

	private static final String START_COMMAND = "Start";
	private static final String Make_Knowlege_Base_COMMAND = "Make Knowlege Base";
	private static final String Enable_HostGraph_COMMAND = "Enable the Selected HostGraph";
	private static final String Explore_COMMAND = "Explore & Make & Model Checking";
	
	
    private static final String CANCEL_COMMAND = "Exit";
    private static final String OK_COMMAND = "Ok";

    private static final String START_TOOLTIP =
        "Restart with the customized exploration";
    
    private static final String Make_knowlege_base_TOOLTIP =
            "Make Knowlege Base...";
    
    
    private static final String Enable_HostGraph_TOOLTIP =
            "Enable The Selected HostGraph...";
    
    private static final String Explore_TOOLTIP =
            "Explore The State Space...";
    
    private static final String DEFAULT_TOOLTIP =
        "Set the currently selected exploration as the default for this grammar";
   

    /**
     * Color to be used for headers on the dialog.
     */
    public static final String HEADER_COLOR = "green";
    /**
     * Color to be used for text in the info panel.
     */
    public static final String INFO_COLOR = "#005050";
    /**
     * Color to be used for the background of the info panel.
     */
    public static final Color INFO_BG_COLOR = new Color(230, 230, 255);
    /**
     * Color to be used for the background boxes on the info panel.
     */
    public static final Color INFO_BOX_BG_COLOR = new Color(210, 210, 255);

    /**
     * Create the dialog.
     * @param simulator - reference to the simulator
     * @param owner - reference to the parent GUI component
     * @throws FormatException
     */
    public HeuStyleInDialog(Simulator simulator, JFrame owner) {
    	
    	
    	this.simulator=simulator;
    	this.owner=owner;
    	//Create the content panel.
        JPanel dialogContent = new JPanel(new SpringLayout());
       
        // dialogContent.setBorder(BorderFactory.createEmptyBorder(10, 400, 400, 400));
        KeyStroke escape = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        dialogContent.registerKeyboardAction(createCloseListener(), escape,
            JComponent.WHEN_IN_FOCUSED_WINDOW);
        dialogContent.registerKeyboardAction(createCloseListener(), enter,
            JComponent.WHEN_IN_FOCUSED_WINDOW);
        
        

        
        rbbyuser=new JRadioButton("The smaller model must be generated by the user.");
    	rbautomatic=new JRadioButton("The smaller model must be generated automatically.");
    	dialogContent.add(rbbyuser);
    	dialogContent.add(rbautomatic);
    	rbbyuser.setSelected(true);
    	
    	ButtonGroup options = new ButtonGroup();
    	options.add(rbbyuser);
    	options.add(rbautomatic);
    	
    	
    	 GrammarModel grammermodel=simulator.getModel().getGrammar();
    	 Set<QualName> sname= grammermodel.getNames(ResourceKind.TYPE);
    	 if(sname.isEmpty()){
    		 TypeGraphName="";
    	 	 rbautomatic.setEnabled(false);
    	 	 rbautomatic.setToolTipText("There is not a Host Graph");
    	 }
    	 else{
    		 Iterator<QualName> it=sname.iterator();
    		 it=sname.iterator();
       		 TypeGraphName=it.next().toString();
    	 }
    	
    	
    	
    	JLabel line2=new JLabel("----------------------------------------------------------");
    	line2.setForeground(Color.red);
    	dialogContent.add(line2);
    	
    	
    	
        dialogContent.add(createOkCancelPanel());
        
        
        
        SpringUtilities.makeCompactGrid(dialogContent, 4, 1, 5, 5, 15, 0);
        // Add the dialogContent to the dialog.
        add(dialogContent);
        setTitle("Select how to produce a smaller model");
        setIconImage(Icons.GROOVE_ICON_16x16.getImage());
        setSize(400, 150);   //width   height
        //pack();
        setLocationRelativeTo(owner);
        
        //setAlwaysOnTop(true);
        
        setVisible(true);
        
     }
   
    private JPanel createOkCancelPanel() {
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(getOkButton());
        buttonPanel.add(getCancelButton());
        return buttonPanel;
    }

   
   
   
    
   

   
    private RefreshButton cancelButton;
    private RefreshButton okButton;
    private String TypeGraphName;
  
   
    
    
    private Simulator simulator;
    private JFrame owner;
    
   
   
   
    
    
    private  JRadioButton rbbyuser;
    private  JRadioButton rbautomatic;
   
   
    
    HeuStyleUserDialog d;
    
    
    /** Initialises and returns the cancel button. */
    private RefreshButton getCancelButton() {
        if (this.cancelButton == null) {
            // Create the explore button (reference is needed when setting the
            // initial value of the (strategy/acceptor) editors.
            this.cancelButton = new RefreshButton(CANCEL_COMMAND) {
                @Override
                public void execute() {
                	
                	closeDialog();
                }

                @Override
                public void refresh(Exploration exploration) {
                    // do nothing
                }
            };
        }
        return this.cancelButton;
    }

    /** Initialises and returns the ok button. */
    private RefreshButton getOkButton() {
        if (this.okButton == null) {
            // Create the explore button (reference is needed when setting the
            // initial value of the (strategy/acceptor) editors.
            this.okButton = new RefreshButton(OK_COMMAND) {
                @Override
                public void execute() {
                	 if(rbbyuser.isSelected()){
                		 new HeuStyleUserDialog(simulator, owner);
                	 }else{
                		 new HeuStyleAutoDialog(simulator, owner);
                	 }
                	 
                }

                @Override
                public void refresh(Exploration exploration) {
                    // do nothing
                }
            };
        }
        return this.okButton;
    }
    
    

    /**
     * Action that responds to Escape. Ensures that the dialog is closed.
     */
    private ActionListener createCloseListener() {
        return new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                closeDialog();
                
            }
        };
    }
    /**
     * The close dialog action. Disposes dialog and resets DismissDelay of the
     * ToolTipManager.
     */
    private void closeDialog() {
        this.dispose();
    }
  
    private abstract class RefreshButton extends JButton {
        /** Constructs a refreshable button with a given button text. */
        public RefreshButton(String text) {
            super(text);
            addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    execute();
                }
            });
        }

        /** Callback action invoked on button click. */
        public abstract void execute();

        /** Callback action allowing the button to refresh its status. */
        public abstract void refresh(Exploration exploration);

        
        protected void setEnabled(String toolTipText, Exploration exploration) {
            setEnabled(true);
       }
    }
   
}
